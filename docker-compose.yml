version: '3.8'

services: 


    #-------------------------------#
    # Spark 🧮                      #
    #-------------------------------#
    spark:
        build: 
            context: spark/streaming
        container_name: spark-streaming
        networks:
          - tap
        volumes:
          - certs:/app/certs
        depends_on:
          zookeeper:
            condition: service_started 
          kafkaserver:
            condition: service_started
          setup:
            condition: service_completed_successfully
          es01:
            condition: service_started
          kibana:
            condition: service_started
            
    #-------------------------------#
    # Zookeeper 🦓                 #
    #-------------------------------#
    zookeeper:
        build:
           context: kafka
           dockerfile: Dockerfile
        image: projtap:kafka
        container_name: kafkaZK
        ports:
            - "2181:2181"
        environment:
            KAFKA_ACTION: start-zk
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_SERVER_ID: "1"
        networks: 
          tap:
            ipv4_address: 10.0.100.22

    #-------------------------------#
    # Kafka Server 📨               #
    #-------------------------------#

    kafkaserver:
        build:
           context: kafka
           dockerfile: Dockerfile
        container_name: kafkaserver
        hostname: kafkaserver
        depends_on:
          - zookeeper
        ports:
          - "9092:9092"
        environment:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafkaserver:9092
          KAFKA_DEFAULT_REPLICATION_FACTOR: 1
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
          KAFKA_ACTION: start-kafka
        networks: 
          tap:
           ipv4_address: 10.0.100.23

    #-------------------------------#
    # Kafka User interface  🖥️      #
    #-------------------------------#
    webui:
        image: provectuslabs/kafka-ui:latest
        container_name: kafkaWebUI
        environment:
            KAFKA_CLUSTERS_0_NAME: cluster_tweets
            KAFKA_CLUSTERS_0_ZOOKEEPER: 10.0.100.22:2181
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 10.0.100.23:9092
        ports: 
            - "8080:8080"
        depends_on: 
            - kafkaserver
        networks: 
            - tap
    
    #-------------------------------#
    # Kafka create topics 🚀        #
    #-------------------------------#
    kafka-create-topic:
        build:
            context: kafka
            dockerfile: Dockerfile
        container_name: kafka-create-topic
        image: projtap:kafka
        depends_on: 
            - kafkaserver
        environment:
            KAFKA_ACTION: create-topic
            KAFKA_SERVER: 10.0.100.23
            KAFKA_TOPIC: tweets 
        networks: 
          tap:
            ipv4_address: 10.0.100.24

    #-------------------------------#
    # Logstash 🎬                   #
    #-------------------------------#
    logstash:
        build: 
            context: logstash
            dockerfile: Dockerfile
        image: projtap:logstash
        container_name: logstash
        depends_on: 
            - kafkaserver
        networks: 
            - tap
        volumes:
            - $PWD/logstash/pipeline/:/usr/share/logstash/pipeline/


    #-------------------------------#
    # SETUP ES e KIBANA 👨‍🏫          #
    #-------------------------------#
    setup:
      image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
      container_name: setupESKibana #new
      volumes:
        - certs:/usr/share/elasticsearch/config/certs
      user: "0"
      command: >
        bash -c '
          if [ x${ELASTIC_PASSWORD} == x ]; then
            echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
            exit 1;
          elif [ x${KIBANA_PASSWORD} == x ]; then
            echo "Set the KIBANA_PASSWORD environment variable in the .env file";
            exit 1;
          fi;
          if [ ! -f config/certs/ca.zip ]; then
            echo "Creating CA";
            bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
            unzip config/certs/ca.zip -d config/certs;
          fi;
          if [ ! -f config/certs/certs.zip ]; then
            echo "Creating certs";
            echo -ne \
            "instances:\n"\
            "  - name: es01\n"\
            "    dns:\n"\
            "      - es01\n"\
            "      - localhost\n"\
            "    ip:\n"\
            "      - 127.0.0.1\n"\
            > config/certs/instances.yml;
            bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
            unzip config/certs/certs.zip -d config/certs;
          fi;
          echo "Setting file permissions"
          chown -R root:root config/certs;
          find . -type d -exec chmod 750 \{\} \;;
          find . -type f -exec chmod 640 \{\} \;;
          echo "Waiting for Elasticsearch availability";
          until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
          echo "Setting kibana_system password";
          until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
          echo "All done!";
          chmod 777 -R config/certs
        '
      healthcheck:
        test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
        interval: 1s
        timeout: 5s
        retries: 120
      networks: 
            - tap

    #-------------------------------#
    # ELASTIC SEARCH  💾            #
    #-------------------------------#
    es01:
      depends_on:
        setup:
          condition: service_healthy
      image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
      container_name: es01 #new
      volumes:
        - certs:/usr/share/elasticsearch/config/certs
        - esdata01:/usr/share/elasticsearch/data
      ports:
        - ${ES_PORT}:9200
      environment:
        - node.name=es01
        - cluster.name=${CLUSTER_NAME}
        - cluster.initial_master_nodes=es01
        - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
        - bootstrap.memory_lock=true
        - xpack.security.enabled=true
        - xpack.security.http.ssl.enabled=true
        - xpack.security.http.ssl.key=certs/es01/es01.key
        - xpack.security.http.ssl.certificate=certs/es01/es01.crt
        - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
        - xpack.security.http.ssl.verification_mode=certificate
        - xpack.security.transport.ssl.enabled=true
        - xpack.security.transport.ssl.key=certs/es01/es01.key
        - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
        - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
        - xpack.security.transport.ssl.verification_mode=certificate
        - xpack.license.self_generated.type=${LICENSE}
        - "ES_JAVA_OPTS=-Xms3g -Xmx3g"
      # mem_limit: ${MEM_LIMIT}
      ulimits:
        memlock:
          soft: -1
          hard: -1
      healthcheck:
        test:
          [
            "CMD-SHELL",
            "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
          ]
        interval: 10s
        timeout: 10s
        retries: 120
      networks: 
        - tap


    #-------------------------------#
    # KIBANA 📺                     #
    #-------------------------------#
    kibana:
      depends_on:
        es01:
          condition: service_healthy
      image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
      container_name: kibana #new
      volumes:
        - certs:/usr/share/kibana/config/certs
        - kibanadata:/usr/share/kibana/data
        - ./ES_Kibana/elasticsearch/configs/kibana.yml:/usr/share/kibana/config/kibana.yml
      ports:
        - ${KIBANA_PORT}:5601
      environment:
        - SERVERNAME=kibana
        - ELASTICSEARCH_HOSTS=https://es01:9200
        - ELASTICSEARCH_USERNAME=kibana_system
        - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
        - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      mem_limit: ${MEM_LIMIT}
      healthcheck:
        test:
          [
            "CMD-SHELL",
            "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
          ]
        interval: 20s
        timeout:  20s
        retries: 120
      networks: 
            - tap

networks:
    tap:
        name: tap
        driver: bridge

#volumi per ES e Kibana e Spark
volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local